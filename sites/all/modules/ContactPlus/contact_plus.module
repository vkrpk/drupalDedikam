<?php
/**
 * @file
 * Adds redirection path to the core contact module
 */

/**
 * Implements hook_menu().
 */
function contact_plus_menu() {
  // Make a new menu item to serve as default tab.
  // This inherits the parent menu item properties (not otherwise set).
  $items['admin/structure/contact/categories'] = array(
    'title' => 'Categories',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Create a new second tab for the new contact form settings.
  $items['admin/structure/contact/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contact_plus_form'),
    'access arguments' => array('administer contact forms'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  return $items;
}


/**
 * Create the system settings form.
 */
function contact_plus_form($form, &$form_state) {
  // Textarea for global text:
  // Info re formats from drupal.org/update/modules/6/7#text_format.
  $defaults = array(
    'value' => '',
    'format' => filter_default_format(),
  );

  $current = variable_get('contact_plus_text_global', $defaults);

  $form['contact_plus_text_global'] = array(
    '#title' => t('Global introduction text'),
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#description' => t('Optionally add text here that will always appear above the contact form, regardless of category.'),
    '#default_value' => $current['value'],
    '#format' => $current['format'],
  );

  // Let's reuse the long options list for both.
  $options = array(
    'leave' => t('Leave the field alone - defaults to &lt;front&gt;'),
    'visible' => t('Make the field visible but not editable'),
    'vset' => t('Make the field visible but not editable, but only if it already has a value (otherwise forced to editable).'),
    'hide' => t('Hide the field completely'),
    'hset' => t('Hide the field completely, but only if it already has a value (otherwise forced to editable).'),
  );

  // Radio for what to do with the name field.
  $form['contact_plus_name'] = array(
    '#type' => 'radios',
    '#title' => t('Alter name field'),
    '#default_value' => variable_get('contact_plus_name', 'leave'),
    '#description' => t('Change whether the user can add/alter their name in the form.'),
    '#options' => $options,
  );

  // Radio for what to do with the sent-from email address field.
  $form['contact_plus_mail'] = array(
    '#type' => 'radios',
    '#title' => t('Alter sent-from address'),
    '#default_value' => variable_get('contact_plus_mail', 'leave'),
    '#description' => t('Change what the user is allowed to do regarding their email address as presented in the form.
      It is not recommended that you alter this setting if your contact form is accessible to anonymous users.'),
    '#options' => $options,
  );

  // Checkbox for "remove subject" field.
  $form['contact_plus_subj'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove "subject" field'),
    '#description' => t('Remove the "Subject" field from the contact form. Not generally recommended,
      but the email and subject will still be valid as the email subject will contain the category name, in square brackets.'),
    '#default_value' => variable_get('contact_plus_subj', FALSE),
  );

  // Checkbox for "remove copy" field.
  $form['contact_plus_copy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove "copy" option'),
    '#description' => t('Remove the "send a copy to yourself" field from the contact form.'),
    '#default_value' => variable_get('contact_plus_copy', FALSE),
  );

  return system_settings_form($form);
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function contact_plus_form_contact_site_form_alter(&$form, &$form_state, $form_id) {
  // Insert the global introduction text if it's set.
  $text_array = variable_get('contact_plus_text_global', '');
  $text_global = check_markup($text_array['value'], $text_array['format'], '', TRUE);
  if ('' != $text_global) {
    $form['contact_plus_text_global'] = array(
      '#markup' => $text_global,
      '#weight' => -10,
    );
  }

  // Assumes variable names map to form elements names.
  // Ie contact_path_mail -> $form['mail'][etc].
  foreach (array('name', 'mail') as $var) {
    switch (variable_get('contact_plus_' . $var, 'leave')) {
      case 'visible':
        // Disable field, make it not required (cosmetic & doesn't confuse).
        $form[$var]['#disabled'] = TRUE;
        $form[$var]['#required'] = FALSE;
        break;

      case 'vset':
        // ONLY IF PRE-SET
        // Disable field, make it not required (cosmetic & doesn't confuse).
        if ('' != $form[$var]['#default_value']) {
          $form[$var]['#disabled'] = TRUE;
          $form[$var]['#required'] = FALSE;
        }
        break;

      case 'hide':
        // Hide the field completely.
        $form[$var]['#access'] = FALSE;
        break;

      case 'hset':
        // ONLY IF PRE-SET - Hide the field completely.
        if ('' != $form[$var]['#default_value']) {
          $form[$var]['#access'] = FALSE;
        }
        break;

      case 'leave':
        // No change.
      default:
        break;
    }
  }

  // Remove subject line.
  if (TRUE == variable_get('contact_plus_subj', FALSE)) {
    $form['subject']['#access'] = FALSE;
  }

  // Remove "send a copy to yourself" option from form (if required).
  if (TRUE == variable_get('contact_plus_copy', FALSE)) {
    $form['copy']['#access'] = FALSE;
  }

  // Add a submit handler so we can perform the redirect on submit.
  $form['#submit'][] = 'contact_plus_submit_contact';
}


/**
 * Custom submit handler for the 'submit contact form' page.
 */
function contact_plus_submit_contact($form, &$form_state) {
  // Set the form to redirect to the path saved for this category.
  $form_state['redirect'] = variable_get('contact_plus_path_' . $form_state['values']['cid'], '<front>');
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function contact_plus_form_contact_category_edit_form_alter(&$form, &$form_state, $form_id) {
  // Add a new form element to store the path (on category pages).
  $form['contact_plus_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect path'),
    '#default_value' => variable_get('contact_plus_path_' . $form['cid']['#value'], '<front>'),
    '#description' => t('Enter the path to redirect to after the contact form has been successfully submitted. Default (empty) is <em>&lt;front&gt;</em>.'),
    '#weight' => '0',
  );

  // Map an extra validate handler for setting the category's redirect path.
  $form['#validate'][] = 'contact_plus_validate_category';

  // Map an extra submit handler for setting the category's redirect path.
  $form['#submit'][] = 'contact_plus_submit_category';
}


/**
 * Custom validate handler for the category settings form.
 */
function contact_plus_validate_category($form, &$form_state) {
  $item = $form_state['values'];
  $path = trim($form_state['values']['contact_plus_path']);
  if (!drupal_valid_path($path, TRUE)) {
    form_set_error('contact_plus_path',
      t("The path '@contact_plus_path' is either invalid or you do not have access to it.",
      array('@contact_plus_path' => $item['contact_plus_path'])));
  }
}


/**
 * Custom submit handler for the category settings form.
 */
function contact_plus_submit_category($form, &$form_state) {
  $path = trim($form_state['values']['contact_plus_path']);

  // Set the path to default if unset in form.
  if (empty($path)) {
    $path = '<front>';
  }

  // Save the path to the database for this category.
  variable_set('contact_plus_path_' . $form_state['values']['cid'], $path);
}
